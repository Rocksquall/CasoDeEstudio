#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modelo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="casodeestudio")]
	public partial class OrmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertcentro_medico(centro_medico instance);
    partial void Updatecentro_medico(centro_medico instance);
    partial void Deletecentro_medico(centro_medico instance);
    partial void Insertcita(cita instance);
    partial void Updatecita(cita instance);
    partial void Deletecita(cita instance);
    partial void Inserteps(eps instance);
    partial void Updateeps(eps instance);
    partial void Deleteeps(eps instance);
    partial void Insertespecialidad(especialidad instance);
    partial void Updateespecialidad(especialidad instance);
    partial void Deleteespecialidad(especialidad instance);
    partial void Insertnivel_atencion(nivel_atencion instance);
    partial void Updatenivel_atencion(nivel_atencion instance);
    partial void Deletenivel_atencion(nivel_atencion instance);
    partial void Insertrol(rol instance);
    partial void Updaterol(rol instance);
    partial void Deleterol(rol instance);
    partial void Insertusuario(usuario instance);
    partial void Updateusuario(usuario instance);
    partial void Deleteusuario(usuario instance);
    partial void Insertusuario_centro_medico(usuario_centro_medico instance);
    partial void Updateusuario_centro_medico(usuario_centro_medico instance);
    partial void Deleteusuario_centro_medico(usuario_centro_medico instance);
    #endregion
		
		public OrmDataContext() : 
				base(global::Modelo.Properties.Settings.Default.casodeestudioConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public OrmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<centro_medico> centro_medico
		{
			get
			{
				return this.GetTable<centro_medico>();
			}
		}
		
		public System.Data.Linq.Table<cita> cita
		{
			get
			{
				return this.GetTable<cita>();
			}
		}
		
		public System.Data.Linq.Table<eps> eps
		{
			get
			{
				return this.GetTable<eps>();
			}
		}
		
		public System.Data.Linq.Table<especialidad> especialidad
		{
			get
			{
				return this.GetTable<especialidad>();
			}
		}
		
		public System.Data.Linq.Table<nivel_atencion> nivel_atencion
		{
			get
			{
				return this.GetTable<nivel_atencion>();
			}
		}
		
		public System.Data.Linq.Table<rol> rol
		{
			get
			{
				return this.GetTable<rol>();
			}
		}
		
		public System.Data.Linq.Table<usuario> usuario
		{
			get
			{
				return this.GetTable<usuario>();
			}
		}
		
		public System.Data.Linq.Table<usuario_centro_medico> usuario_centro_medico
		{
			get
			{
				return this.GetTable<usuario_centro_medico>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.centro_medico")]
	public partial class centro_medico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idcentro_medico;
		
		private string _nombre_centro;
		
		private string _direccion_centro;
		
		private string _foto_centro;
		
		private string _hora_inicio;
		
		private string _hora_fin;
		
		private string _telefono_centro;
		
		private string _visita_centro;
		
		private int _nivel_atencion_idnivel_atencion;
		
		private int _especialidad_idespecialidad;
		
		private int _eps_ideps;
		
		private EntitySet<cita> _cita;
		
		private EntitySet<usuario_centro_medico> _usuario_centro_medico;
		
		private EntityRef<eps> _eps;
		
		private EntityRef<especialidad> _especialidad;
		
		private EntityRef<nivel_atencion> _nivel_atencion;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onidcentro_medicoChanging(int value);
    partial void Onidcentro_medicoChanged();
    partial void Onnombre_centroChanging(string value);
    partial void Onnombre_centroChanged();
    partial void Ondireccion_centroChanging(string value);
    partial void Ondireccion_centroChanged();
    partial void Onfoto_centroChanging(string value);
    partial void Onfoto_centroChanged();
    partial void Onhora_inicioChanging(string value);
    partial void Onhora_inicioChanged();
    partial void Onhora_finChanging(string value);
    partial void Onhora_finChanged();
    partial void Ontelefono_centroChanging(string value);
    partial void Ontelefono_centroChanged();
    partial void Onvisita_centroChanging(string value);
    partial void Onvisita_centroChanged();
    partial void Onnivel_atencion_idnivel_atencionChanging(int value);
    partial void Onnivel_atencion_idnivel_atencionChanged();
    partial void Onespecialidad_idespecialidadChanging(int value);
    partial void Onespecialidad_idespecialidadChanged();
    partial void Oneps_idepsChanging(int value);
    partial void Oneps_idepsChanged();
    #endregion
		
		public centro_medico()
		{
			this._cita = new EntitySet<cita>(new Action<cita>(this.attach_cita), new Action<cita>(this.detach_cita));
			this._usuario_centro_medico = new EntitySet<usuario_centro_medico>(new Action<usuario_centro_medico>(this.attach_usuario_centro_medico), new Action<usuario_centro_medico>(this.detach_usuario_centro_medico));
			this._eps = default(EntityRef<eps>);
			this._especialidad = default(EntityRef<especialidad>);
			this._nivel_atencion = default(EntityRef<nivel_atencion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcentro_medico", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idcentro_medico
		{
			get
			{
				return this._idcentro_medico;
			}
			set
			{
				if ((this._idcentro_medico != value))
				{
					this.Onidcentro_medicoChanging(value);
					this.SendPropertyChanging();
					this._idcentro_medico = value;
					this.SendPropertyChanged("idcentro_medico");
					this.Onidcentro_medicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre_centro", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string nombre_centro
		{
			get
			{
				return this._nombre_centro;
			}
			set
			{
				if ((this._nombre_centro != value))
				{
					this.Onnombre_centroChanging(value);
					this.SendPropertyChanging();
					this._nombre_centro = value;
					this.SendPropertyChanged("nombre_centro");
					this.Onnombre_centroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direccion_centro", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string direccion_centro
		{
			get
			{
				return this._direccion_centro;
			}
			set
			{
				if ((this._direccion_centro != value))
				{
					this.Ondireccion_centroChanging(value);
					this.SendPropertyChanging();
					this._direccion_centro = value;
					this.SendPropertyChanged("direccion_centro");
					this.Ondireccion_centroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foto_centro", DbType="NVarChar(45)")]
		public string foto_centro
		{
			get
			{
				return this._foto_centro;
			}
			set
			{
				if ((this._foto_centro != value))
				{
					this.Onfoto_centroChanging(value);
					this.SendPropertyChanging();
					this._foto_centro = value;
					this.SendPropertyChanged("foto_centro");
					this.Onfoto_centroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hora_inicio", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string hora_inicio
		{
			get
			{
				return this._hora_inicio;
			}
			set
			{
				if ((this._hora_inicio != value))
				{
					this.Onhora_inicioChanging(value);
					this.SendPropertyChanging();
					this._hora_inicio = value;
					this.SendPropertyChanged("hora_inicio");
					this.Onhora_inicioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hora_fin", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string hora_fin
		{
			get
			{
				return this._hora_fin;
			}
			set
			{
				if ((this._hora_fin != value))
				{
					this.Onhora_finChanging(value);
					this.SendPropertyChanging();
					this._hora_fin = value;
					this.SendPropertyChanged("hora_fin");
					this.Onhora_finChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telefono_centro", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string telefono_centro
		{
			get
			{
				return this._telefono_centro;
			}
			set
			{
				if ((this._telefono_centro != value))
				{
					this.Ontelefono_centroChanging(value);
					this.SendPropertyChanging();
					this._telefono_centro = value;
					this.SendPropertyChanged("telefono_centro");
					this.Ontelefono_centroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visita_centro", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string visita_centro
		{
			get
			{
				return this._visita_centro;
			}
			set
			{
				if ((this._visita_centro != value))
				{
					this.Onvisita_centroChanging(value);
					this.SendPropertyChanging();
					this._visita_centro = value;
					this.SendPropertyChanged("visita_centro");
					this.Onvisita_centroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nivel_atencion_idnivel_atencion", DbType="Int NOT NULL")]
		public int nivel_atencion_idnivel_atencion
		{
			get
			{
				return this._nivel_atencion_idnivel_atencion;
			}
			set
			{
				if ((this._nivel_atencion_idnivel_atencion != value))
				{
					if (this._nivel_atencion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onnivel_atencion_idnivel_atencionChanging(value);
					this.SendPropertyChanging();
					this._nivel_atencion_idnivel_atencion = value;
					this.SendPropertyChanged("nivel_atencion_idnivel_atencion");
					this.Onnivel_atencion_idnivel_atencionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_especialidad_idespecialidad", DbType="Int NOT NULL")]
		public int especialidad_idespecialidad
		{
			get
			{
				return this._especialidad_idespecialidad;
			}
			set
			{
				if ((this._especialidad_idespecialidad != value))
				{
					if (this._especialidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onespecialidad_idespecialidadChanging(value);
					this.SendPropertyChanging();
					this._especialidad_idespecialidad = value;
					this.SendPropertyChanged("especialidad_idespecialidad");
					this.Onespecialidad_idespecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eps_ideps", DbType="Int NOT NULL")]
		public int eps_ideps
		{
			get
			{
				return this._eps_ideps;
			}
			set
			{
				if ((this._eps_ideps != value))
				{
					if (this._eps.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oneps_idepsChanging(value);
					this.SendPropertyChanging();
					this._eps_ideps = value;
					this.SendPropertyChanged("eps_ideps");
					this.Oneps_idepsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="centro_medico_cita", Storage="_cita", ThisKey="idcentro_medico", OtherKey="centro_medico_idcentro_medico")]
		public EntitySet<cita> cita
		{
			get
			{
				return this._cita;
			}
			set
			{
				this._cita.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="centro_medico_usuario_centro_medico", Storage="_usuario_centro_medico", ThisKey="idcentro_medico", OtherKey="centro_medico_idcentro_medico")]
		public EntitySet<usuario_centro_medico> usuario_centro_medico
		{
			get
			{
				return this._usuario_centro_medico;
			}
			set
			{
				this._usuario_centro_medico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eps_centro_medico", Storage="_eps", ThisKey="eps_ideps", OtherKey="ideps", IsForeignKey=true)]
		public eps eps
		{
			get
			{
				return this._eps.Entity;
			}
			set
			{
				eps previousValue = this._eps.Entity;
				if (((previousValue != value) 
							|| (this._eps.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eps.Entity = null;
						previousValue.centro_medico.Remove(this);
					}
					this._eps.Entity = value;
					if ((value != null))
					{
						value.centro_medico.Add(this);
						this._eps_ideps = value.ideps;
					}
					else
					{
						this._eps_ideps = default(int);
					}
					this.SendPropertyChanged("eps");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="especialidad_centro_medico", Storage="_especialidad", ThisKey="especialidad_idespecialidad", OtherKey="idespecialidad", IsForeignKey=true)]
		public especialidad especialidad
		{
			get
			{
				return this._especialidad.Entity;
			}
			set
			{
				especialidad previousValue = this._especialidad.Entity;
				if (((previousValue != value) 
							|| (this._especialidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._especialidad.Entity = null;
						previousValue.centro_medico.Remove(this);
					}
					this._especialidad.Entity = value;
					if ((value != null))
					{
						value.centro_medico.Add(this);
						this._especialidad_idespecialidad = value.idespecialidad;
					}
					else
					{
						this._especialidad_idespecialidad = default(int);
					}
					this.SendPropertyChanged("especialidad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nivel_atencion_centro_medico", Storage="_nivel_atencion", ThisKey="nivel_atencion_idnivel_atencion", OtherKey="idnivel_atencion", IsForeignKey=true)]
		public nivel_atencion nivel_atencion
		{
			get
			{
				return this._nivel_atencion.Entity;
			}
			set
			{
				nivel_atencion previousValue = this._nivel_atencion.Entity;
				if (((previousValue != value) 
							|| (this._nivel_atencion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nivel_atencion.Entity = null;
						previousValue.centro_medico.Remove(this);
					}
					this._nivel_atencion.Entity = value;
					if ((value != null))
					{
						value.centro_medico.Add(this);
						this._nivel_atencion_idnivel_atencion = value.idnivel_atencion;
					}
					else
					{
						this._nivel_atencion_idnivel_atencion = default(int);
					}
					this.SendPropertyChanged("nivel_atencion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cita(cita entity)
		{
			this.SendPropertyChanging();
			entity.centro_medico = this;
		}
		
		private void detach_cita(cita entity)
		{
			this.SendPropertyChanging();
			entity.centro_medico = null;
		}
		
		private void attach_usuario_centro_medico(usuario_centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.centro_medico = this;
		}
		
		private void detach_usuario_centro_medico(usuario_centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.centro_medico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.cita")]
	public partial class cita : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idcita;
		
		private string _fecha_cita;
		
		private int _centro_medico_idcentro_medico;
		
		private EntityRef<centro_medico> _centro_medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidcitaChanging(int value);
    partial void OnidcitaChanged();
    partial void Onfecha_citaChanging(string value);
    partial void Onfecha_citaChanged();
    partial void Oncentro_medico_idcentro_medicoChanging(int value);
    partial void Oncentro_medico_idcentro_medicoChanged();
    #endregion
		
		public cita()
		{
			this._centro_medico = default(EntityRef<centro_medico>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcita", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idcita
		{
			get
			{
				return this._idcita;
			}
			set
			{
				if ((this._idcita != value))
				{
					this.OnidcitaChanging(value);
					this.SendPropertyChanging();
					this._idcita = value;
					this.SendPropertyChanged("idcita");
					this.OnidcitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecha_cita", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string fecha_cita
		{
			get
			{
				return this._fecha_cita;
			}
			set
			{
				if ((this._fecha_cita != value))
				{
					this.Onfecha_citaChanging(value);
					this.SendPropertyChanging();
					this._fecha_cita = value;
					this.SendPropertyChanged("fecha_cita");
					this.Onfecha_citaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_centro_medico_idcentro_medico", DbType="Int NOT NULL")]
		public int centro_medico_idcentro_medico
		{
			get
			{
				return this._centro_medico_idcentro_medico;
			}
			set
			{
				if ((this._centro_medico_idcentro_medico != value))
				{
					if (this._centro_medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncentro_medico_idcentro_medicoChanging(value);
					this.SendPropertyChanging();
					this._centro_medico_idcentro_medico = value;
					this.SendPropertyChanged("centro_medico_idcentro_medico");
					this.Oncentro_medico_idcentro_medicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="centro_medico_cita", Storage="_centro_medico", ThisKey="centro_medico_idcentro_medico", OtherKey="idcentro_medico", IsForeignKey=true)]
		public centro_medico centro_medico
		{
			get
			{
				return this._centro_medico.Entity;
			}
			set
			{
				centro_medico previousValue = this._centro_medico.Entity;
				if (((previousValue != value) 
							|| (this._centro_medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._centro_medico.Entity = null;
						previousValue.cita.Remove(this);
					}
					this._centro_medico.Entity = value;
					if ((value != null))
					{
						value.cita.Add(this);
						this._centro_medico_idcentro_medico = value.idcentro_medico;
					}
					else
					{
						this._centro_medico_idcentro_medico = default(int);
					}
					this.SendPropertyChanged("centro_medico");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.eps")]
	public partial class eps : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ideps;
		
		private string _nit_eps;
		
		private string _nombre_eps;
		
		private string _direccion_eps;
		
		private string _telefono_eps;
		
		private string _clave_eps;
		
		private EntitySet<centro_medico> _centro_medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidepsChanging(int value);
    partial void OnidepsChanged();
    partial void Onnit_epsChanging(string value);
    partial void Onnit_epsChanged();
    partial void Onnombre_epsChanging(string value);
    partial void Onnombre_epsChanged();
    partial void Ondireccion_epsChanging(string value);
    partial void Ondireccion_epsChanged();
    partial void Ontelefono_epsChanging(string value);
    partial void Ontelefono_epsChanged();
    partial void Onclave_epsChanging(string value);
    partial void Onclave_epsChanged();
    #endregion
		
		public eps()
		{
			this._centro_medico = new EntitySet<centro_medico>(new Action<centro_medico>(this.attach_centro_medico), new Action<centro_medico>(this.detach_centro_medico));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ideps", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ideps
		{
			get
			{
				return this._ideps;
			}
			set
			{
				if ((this._ideps != value))
				{
					this.OnidepsChanging(value);
					this.SendPropertyChanging();
					this._ideps = value;
					this.SendPropertyChanged("ideps");
					this.OnidepsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nit_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string nit_eps
		{
			get
			{
				return this._nit_eps;
			}
			set
			{
				if ((this._nit_eps != value))
				{
					this.Onnit_epsChanging(value);
					this.SendPropertyChanging();
					this._nit_eps = value;
					this.SendPropertyChanged("nit_eps");
					this.Onnit_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string nombre_eps
		{
			get
			{
				return this._nombre_eps;
			}
			set
			{
				if ((this._nombre_eps != value))
				{
					this.Onnombre_epsChanging(value);
					this.SendPropertyChanging();
					this._nombre_eps = value;
					this.SendPropertyChanged("nombre_eps");
					this.Onnombre_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direccion_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string direccion_eps
		{
			get
			{
				return this._direccion_eps;
			}
			set
			{
				if ((this._direccion_eps != value))
				{
					this.Ondireccion_epsChanging(value);
					this.SendPropertyChanging();
					this._direccion_eps = value;
					this.SendPropertyChanged("direccion_eps");
					this.Ondireccion_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telefono_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string telefono_eps
		{
			get
			{
				return this._telefono_eps;
			}
			set
			{
				if ((this._telefono_eps != value))
				{
					this.Ontelefono_epsChanging(value);
					this.SendPropertyChanging();
					this._telefono_eps = value;
					this.SendPropertyChanged("telefono_eps");
					this.Ontelefono_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clave_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string clave_eps
		{
			get
			{
				return this._clave_eps;
			}
			set
			{
				if ((this._clave_eps != value))
				{
					this.Onclave_epsChanging(value);
					this.SendPropertyChanging();
					this._clave_eps = value;
					this.SendPropertyChanged("clave_eps");
					this.Onclave_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eps_centro_medico", Storage="_centro_medico", ThisKey="ideps", OtherKey="eps_ideps")]
		public EntitySet<centro_medico> centro_medico
		{
			get
			{
				return this._centro_medico;
			}
			set
			{
				this._centro_medico.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.eps = this;
		}
		
		private void detach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.eps = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.especialidad")]
	public partial class especialidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idespecialidad;
		
		private string _especialidad_eps;
		
		private EntitySet<centro_medico> _centro_medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidespecialidadChanging(int value);
    partial void OnidespecialidadChanged();
    partial void Onespecialidad_epsChanging(string value);
    partial void Onespecialidad_epsChanged();
    #endregion
		
		public especialidad()
		{
			this._centro_medico = new EntitySet<centro_medico>(new Action<centro_medico>(this.attach_centro_medico), new Action<centro_medico>(this.detach_centro_medico));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idespecialidad", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idespecialidad
		{
			get
			{
				return this._idespecialidad;
			}
			set
			{
				if ((this._idespecialidad != value))
				{
					this.OnidespecialidadChanging(value);
					this.SendPropertyChanging();
					this._idespecialidad = value;
					this.SendPropertyChanged("idespecialidad");
					this.OnidespecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_especialidad_eps", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string especialidad_eps
		{
			get
			{
				return this._especialidad_eps;
			}
			set
			{
				if ((this._especialidad_eps != value))
				{
					this.Onespecialidad_epsChanging(value);
					this.SendPropertyChanging();
					this._especialidad_eps = value;
					this.SendPropertyChanged("especialidad_eps");
					this.Onespecialidad_epsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="especialidad_centro_medico", Storage="_centro_medico", ThisKey="idespecialidad", OtherKey="especialidad_idespecialidad")]
		public EntitySet<centro_medico> centro_medico
		{
			get
			{
				return this._centro_medico;
			}
			set
			{
				this._centro_medico.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.especialidad = this;
		}
		
		private void detach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.especialidad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.nivel_atencion")]
	public partial class nivel_atencion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idnivel_atencion;
		
		private string _atencion;
		
		private EntitySet<centro_medico> _centro_medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onidnivel_atencionChanging(int value);
    partial void Onidnivel_atencionChanged();
    partial void OnatencionChanging(string value);
    partial void OnatencionChanged();
    #endregion
		
		public nivel_atencion()
		{
			this._centro_medico = new EntitySet<centro_medico>(new Action<centro_medico>(this.attach_centro_medico), new Action<centro_medico>(this.detach_centro_medico));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idnivel_atencion", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idnivel_atencion
		{
			get
			{
				return this._idnivel_atencion;
			}
			set
			{
				if ((this._idnivel_atencion != value))
				{
					this.Onidnivel_atencionChanging(value);
					this.SendPropertyChanging();
					this._idnivel_atencion = value;
					this.SendPropertyChanged("idnivel_atencion");
					this.Onidnivel_atencionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_atencion", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string atencion
		{
			get
			{
				return this._atencion;
			}
			set
			{
				if ((this._atencion != value))
				{
					this.OnatencionChanging(value);
					this.SendPropertyChanging();
					this._atencion = value;
					this.SendPropertyChanged("atencion");
					this.OnatencionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nivel_atencion_centro_medico", Storage="_centro_medico", ThisKey="idnivel_atencion", OtherKey="nivel_atencion_idnivel_atencion")]
		public EntitySet<centro_medico> centro_medico
		{
			get
			{
				return this._centro_medico;
			}
			set
			{
				this._centro_medico.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.nivel_atencion = this;
		}
		
		private void detach_centro_medico(centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.nivel_atencion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.rol")]
	public partial class rol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idrol;
		
		private string _rol1;
		
		private EntitySet<usuario> _usuario;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidrolChanging(int value);
    partial void OnidrolChanged();
    partial void Onrol1Changing(string value);
    partial void Onrol1Changed();
    #endregion
		
		public rol()
		{
			this._usuario = new EntitySet<usuario>(new Action<usuario>(this.attach_usuario), new Action<usuario>(this.detach_usuario));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idrol", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idrol
		{
			get
			{
				return this._idrol;
			}
			set
			{
				if ((this._idrol != value))
				{
					this.OnidrolChanging(value);
					this.SendPropertyChanging();
					this._idrol = value;
					this.SendPropertyChanged("idrol");
					this.OnidrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rol1", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string rol1
		{
			get
			{
				return this._rol1;
			}
			set
			{
				if ((this._rol1 != value))
				{
					this.Onrol1Changing(value);
					this.SendPropertyChanging();
					this._rol1 = value;
					this.SendPropertyChanged("rol1");
					this.Onrol1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rol_usuario", Storage="_usuario", ThisKey="idrol", OtherKey="rol_idrol")]
		public EntitySet<usuario> usuario
		{
			get
			{
				return this._usuario;
			}
			set
			{
				this._usuario.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_usuario(usuario entity)
		{
			this.SendPropertyChanging();
			entity.rol = this;
		}
		
		private void detach_usuario(usuario entity)
		{
			this.SendPropertyChanging();
			entity.rol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.usuario")]
	public partial class usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idusuario;
		
		private string _nombre_u;
		
		private string _apellido_u;
		
		private string _cedula_u;
		
		private string _telefono_u;
		
		private string _correo_u;
		
		private string _clave_u;
		
		private int _rol_idrol;
		
		private EntitySet<usuario_centro_medico> _usuario_centro_medico;
		
		private EntityRef<rol> _rol;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidusuarioChanging(int value);
    partial void OnidusuarioChanged();
    partial void Onnombre_uChanging(string value);
    partial void Onnombre_uChanged();
    partial void Onapellido_uChanging(string value);
    partial void Onapellido_uChanged();
    partial void Oncedula_uChanging(string value);
    partial void Oncedula_uChanged();
    partial void Ontelefono_uChanging(string value);
    partial void Ontelefono_uChanged();
    partial void Oncorreo_uChanging(string value);
    partial void Oncorreo_uChanged();
    partial void Onclave_uChanging(string value);
    partial void Onclave_uChanged();
    partial void Onrol_idrolChanging(int value);
    partial void Onrol_idrolChanged();
    #endregion
		
		public usuario()
		{
			this._usuario_centro_medico = new EntitySet<usuario_centro_medico>(new Action<usuario_centro_medico>(this.attach_usuario_centro_medico), new Action<usuario_centro_medico>(this.detach_usuario_centro_medico));
			this._rol = default(EntityRef<rol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idusuario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idusuario
		{
			get
			{
				return this._idusuario;
			}
			set
			{
				if ((this._idusuario != value))
				{
					this.OnidusuarioChanging(value);
					this.SendPropertyChanging();
					this._idusuario = value;
					this.SendPropertyChanged("idusuario");
					this.OnidusuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string nombre_u
		{
			get
			{
				return this._nombre_u;
			}
			set
			{
				if ((this._nombre_u != value))
				{
					this.Onnombre_uChanging(value);
					this.SendPropertyChanging();
					this._nombre_u = value;
					this.SendPropertyChanged("nombre_u");
					this.Onnombre_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apellido_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string apellido_u
		{
			get
			{
				return this._apellido_u;
			}
			set
			{
				if ((this._apellido_u != value))
				{
					this.Onapellido_uChanging(value);
					this.SendPropertyChanging();
					this._apellido_u = value;
					this.SendPropertyChanged("apellido_u");
					this.Onapellido_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cedula_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string cedula_u
		{
			get
			{
				return this._cedula_u;
			}
			set
			{
				if ((this._cedula_u != value))
				{
					this.Oncedula_uChanging(value);
					this.SendPropertyChanging();
					this._cedula_u = value;
					this.SendPropertyChanged("cedula_u");
					this.Oncedula_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telefono_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string telefono_u
		{
			get
			{
				return this._telefono_u;
			}
			set
			{
				if ((this._telefono_u != value))
				{
					this.Ontelefono_uChanging(value);
					this.SendPropertyChanging();
					this._telefono_u = value;
					this.SendPropertyChanged("telefono_u");
					this.Ontelefono_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correo_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string correo_u
		{
			get
			{
				return this._correo_u;
			}
			set
			{
				if ((this._correo_u != value))
				{
					this.Oncorreo_uChanging(value);
					this.SendPropertyChanging();
					this._correo_u = value;
					this.SendPropertyChanged("correo_u");
					this.Oncorreo_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clave_u", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string clave_u
		{
			get
			{
				return this._clave_u;
			}
			set
			{
				if ((this._clave_u != value))
				{
					this.Onclave_uChanging(value);
					this.SendPropertyChanging();
					this._clave_u = value;
					this.SendPropertyChanged("clave_u");
					this.Onclave_uChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rol_idrol", DbType="Int NOT NULL")]
		public int rol_idrol
		{
			get
			{
				return this._rol_idrol;
			}
			set
			{
				if ((this._rol_idrol != value))
				{
					if (this._rol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrol_idrolChanging(value);
					this.SendPropertyChanging();
					this._rol_idrol = value;
					this.SendPropertyChanged("rol_idrol");
					this.Onrol_idrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usuario_usuario_centro_medico", Storage="_usuario_centro_medico", ThisKey="idusuario", OtherKey="usuario_idusuario")]
		public EntitySet<usuario_centro_medico> usuario_centro_medico
		{
			get
			{
				return this._usuario_centro_medico;
			}
			set
			{
				this._usuario_centro_medico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rol_usuario", Storage="_rol", ThisKey="rol_idrol", OtherKey="idrol", IsForeignKey=true)]
		public rol rol
		{
			get
			{
				return this._rol.Entity;
			}
			set
			{
				rol previousValue = this._rol.Entity;
				if (((previousValue != value) 
							|| (this._rol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rol.Entity = null;
						previousValue.usuario.Remove(this);
					}
					this._rol.Entity = value;
					if ((value != null))
					{
						value.usuario.Add(this);
						this._rol_idrol = value.idrol;
					}
					else
					{
						this._rol_idrol = default(int);
					}
					this.SendPropertyChanged("rol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_usuario_centro_medico(usuario_centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.usuario = this;
		}
		
		private void detach_usuario_centro_medico(usuario_centro_medico entity)
		{
			this.SendPropertyChanging();
			entity.usuario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="casodeestudio.usuario_centro_medico")]
	public partial class usuario_centro_medico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idusuario_centro_medico;
		
		private string _calificacion;
		
		private int _centro_medico_idcentro_medico;
		
		private int _usuario_idusuario;
		
		private EntityRef<centro_medico> _centro_medico;
		
		private EntityRef<usuario> _usuario;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onidusuario_centro_medicoChanging(int value);
    partial void Onidusuario_centro_medicoChanged();
    partial void OncalificacionChanging(string value);
    partial void OncalificacionChanged();
    partial void Oncentro_medico_idcentro_medicoChanging(int value);
    partial void Oncentro_medico_idcentro_medicoChanged();
    partial void Onusuario_idusuarioChanging(int value);
    partial void Onusuario_idusuarioChanged();
    #endregion
		
		public usuario_centro_medico()
		{
			this._centro_medico = default(EntityRef<centro_medico>);
			this._usuario = default(EntityRef<usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idusuario_centro_medico", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idusuario_centro_medico
		{
			get
			{
				return this._idusuario_centro_medico;
			}
			set
			{
				if ((this._idusuario_centro_medico != value))
				{
					this.Onidusuario_centro_medicoChanging(value);
					this.SendPropertyChanging();
					this._idusuario_centro_medico = value;
					this.SendPropertyChanged("idusuario_centro_medico");
					this.Onidusuario_centro_medicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_calificacion", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string calificacion
		{
			get
			{
				return this._calificacion;
			}
			set
			{
				if ((this._calificacion != value))
				{
					this.OncalificacionChanging(value);
					this.SendPropertyChanging();
					this._calificacion = value;
					this.SendPropertyChanged("calificacion");
					this.OncalificacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_centro_medico_idcentro_medico", DbType="Int NOT NULL")]
		public int centro_medico_idcentro_medico
		{
			get
			{
				return this._centro_medico_idcentro_medico;
			}
			set
			{
				if ((this._centro_medico_idcentro_medico != value))
				{
					if (this._centro_medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncentro_medico_idcentro_medicoChanging(value);
					this.SendPropertyChanging();
					this._centro_medico_idcentro_medico = value;
					this.SendPropertyChanged("centro_medico_idcentro_medico");
					this.Oncentro_medico_idcentro_medicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuario_idusuario", DbType="Int NOT NULL")]
		public int usuario_idusuario
		{
			get
			{
				return this._usuario_idusuario;
			}
			set
			{
				if ((this._usuario_idusuario != value))
				{
					if (this._usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusuario_idusuarioChanging(value);
					this.SendPropertyChanging();
					this._usuario_idusuario = value;
					this.SendPropertyChanged("usuario_idusuario");
					this.Onusuario_idusuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="centro_medico_usuario_centro_medico", Storage="_centro_medico", ThisKey="centro_medico_idcentro_medico", OtherKey="idcentro_medico", IsForeignKey=true)]
		public centro_medico centro_medico
		{
			get
			{
				return this._centro_medico.Entity;
			}
			set
			{
				centro_medico previousValue = this._centro_medico.Entity;
				if (((previousValue != value) 
							|| (this._centro_medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._centro_medico.Entity = null;
						previousValue.usuario_centro_medico.Remove(this);
					}
					this._centro_medico.Entity = value;
					if ((value != null))
					{
						value.usuario_centro_medico.Add(this);
						this._centro_medico_idcentro_medico = value.idcentro_medico;
					}
					else
					{
						this._centro_medico_idcentro_medico = default(int);
					}
					this.SendPropertyChanged("centro_medico");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usuario_usuario_centro_medico", Storage="_usuario", ThisKey="usuario_idusuario", OtherKey="idusuario", IsForeignKey=true)]
		public usuario usuario
		{
			get
			{
				return this._usuario.Entity;
			}
			set
			{
				usuario previousValue = this._usuario.Entity;
				if (((previousValue != value) 
							|| (this._usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._usuario.Entity = null;
						previousValue.usuario_centro_medico.Remove(this);
					}
					this._usuario.Entity = value;
					if ((value != null))
					{
						value.usuario_centro_medico.Add(this);
						this._usuario_idusuario = value.idusuario;
					}
					else
					{
						this._usuario_idusuario = default(int);
					}
					this.SendPropertyChanged("usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
